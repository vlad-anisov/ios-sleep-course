//
//  UITests.swift
//  sleep courseUITests
//
//  Created by Migration Assistant on 21.10.25.
//

import XCTest

final class SleepCourseUITests: XCTestCase {
    
    var app: XCUIApplication!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app = XCUIApplication()
        app.launch()
    }
    
    override func tearDownWithError() throws {
        app = nil
    }
    
    // MARK: - Tab Navigation Tests
    
    func testTabNavigationExists() throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ 4 —Ç–∞–±–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        let tabBar = app.tabBars.firstMatch
        XCTAssertTrue(tabBar.exists)
        
        XCTAssertTrue(tabBar.buttons["–ß–∞—Ç"].exists)
        XCTAssertTrue(tabBar.buttons["Articles"].exists)
        XCTAssertTrue(tabBar.buttons["Ritual"].exists)
        XCTAssertTrue(tabBar.buttons["Settings"].exists)
    }
    
    func testTabNavigation() throws {
        let tabBar = app.tabBars.firstMatch
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Articles
        tabBar.buttons["Articles"].tap()
        XCTAssertTrue(app.navigationBars["Articles"].exists)
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Ritual
        tabBar.buttons["Ritual"].tap()
        XCTAssertTrue(app.navigationBars["Ritual"].exists || app.staticTexts["–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª"].exists)
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Settings
        tabBar.buttons["Settings"].tap()
        XCTAssertTrue(app.navigationBars["Settings"].exists)
        
        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ Chat
        tabBar.buttons["–ß–∞—Ç"].tap()
        XCTAssertTrue(app.navigationBars["–ß–∞—Ç"].exists)
    }
    
    // MARK: - Chat Tests
    
    func testChatInitialMessage() throws {
        // –ß–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        XCTAssertTrue(app.navigationBars["–ß–∞—Ç"].exists)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Eva
        let evaMessage = app.staticTexts.containing(NSPredicate(format: "label CONTAINS '–ü—Ä–∏–≤–µ—Ç'")).firstMatch
        XCTAssertTrue(evaMessage.waitForExistence(timeout: 2))
    }
    
    func testChatMessageInput() throws {
        let messageField = app.textFields["–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."]
        XCTAssertTrue(messageField.exists)
        
        // –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        messageField.tap()
        messageField.typeText("–ü—Ä–∏–≤–µ—Ç!")
        
        // –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        let sendButton = app.buttons.matching(identifier: "arrow.up.circle.fill").firstMatch
        XCTAssertTrue(sendButton.exists)
        sendButton.tap()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å
        let userMessage = app.staticTexts["–ü—Ä–∏–≤–µ—Ç!"]
        XCTAssertTrue(userMessage.waitForExistence(timeout: 2))
    }
    
    func testChatScriptButtons() throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ (–µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∏—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç)
        sleep(1) // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
        
        let buttons = app.buttons.matching(NSPredicate(format: "label CONTAINS 'ü§©' OR label CONTAINS 'üöÄ'"))
        
        if buttons.count > 0 {
            let firstButton = buttons.firstMatch
            XCTAssertTrue(firstButton.exists)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
            XCTAssertTrue(firstButton.isEnabled)
            
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
            firstButton.tap()
            
            // –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sleep(1)
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
        }
    }
    
    // MARK: - Articles Tests
    
    func testArticlesGridDisplays15Cards() throws {
        app.tabBars.buttons["Articles"].tap()
        
        // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
        sleep(1)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–µ–π
        let articlesCount = app.scrollViews.firstMatch.otherElements.buttons.count
        
        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 15 –∫–∞—Ä—Ç–æ—á–µ–∫ (–∏–ª–∏ –æ–∫–æ–ª–æ —Ç–æ–≥–æ, —Å —É—á—ë—Ç–æ–º LazyVGrid)
        XCTAssertGreaterThanOrEqual(articlesCount, 10, "Should display at least 10 articles")
    }
    
    func testArticleCardElements() throws {
        app.tabBars.buttons["Articles"].tap()
        sleep(1)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        let scrollView = app.scrollViews.firstMatch
        let firstCard = scrollView.buttons.firstMatch
        
        XCTAssertTrue(firstCard.exists)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ (–≤ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏)
        // –≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        let cardLabel = firstCard.label
        XCTAssertFalse(cardLabel.isEmpty)
    }
    
    func testArticleDetailOpens() throws {
        app.tabBars.buttons["Articles"].tap()
        sleep(1)
        
        // –¢–∞–ø–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é
        let scrollView = app.scrollViews.firstMatch
        let firstCard = scrollView.buttons.firstMatch
        firstCard.tap()
        
        // –î–æ–ª–∂–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        sleep(1)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ Done
        let doneButton = app.buttons["Done"]
        XCTAssertTrue(doneButton.waitForExistence(timeout: 3))
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º
        doneButton.tap()
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        XCTAssertTrue(app.navigationBars["Articles"].waitForExistence(timeout: 2))
    }
    
    // MARK: - Ritual Tests
    
    func testRitualDisplaysElements() throws {
        app.tabBars.buttons["Ritual"].tap()
        sleep(1)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∏—Ç—É–∞–ª–∞
        let ritualElements = app.staticTexts.matching(NSPredicate(format: "label CONTAINS 'üßò' OR label CONTAINS 'ü•ù' OR label CONTAINS 'üí®'"))
        
        XCTAssertGreaterThanOrEqual(ritualElements.count, 3, "Should display at least 3 ritual elements")
    }
    
    func testRitualCheckboxToggle() throws {
        app.tabBars.buttons["Ritual"].tap()
        sleep(1)
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∏—Ç—É–∞–ª–∞
        let firstRow = app.tables.cells.firstMatch
        XCTAssertTrue(firstRow.exists)
        
        // –¢–∞–ø–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫—É (–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è —á–µ–∫–±–æ–∫—Å)
        firstRow.tap()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–≤–∏–∑—É–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞)
        XCTAssertTrue(firstRow.exists)
    }
    
    func testRitualCompletionMessage() throws {
        app.tabBars.buttons["Ritual"].tap()
        sleep(1)
        
        // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ)
        let rows = app.tables.cells
        let rowCount = min(rows.count, 10) // –ú–∞–∫—Å–∏–º—É–º 10 –¥–ª—è —Ç–µ—Å—Ç–∞
        
        for i in 0..<rowCount {
            if i < rows.count {
                rows.element(boundBy: i).tap()
                sleep(0.2)
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        let doneMessage = app.staticTexts.containing(NSPredicate(format: "label CONTAINS 'Ritual is done' OR label CONTAINS 'done'")).firstMatch
        
        // –ú–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è, –µ—Å–ª–∏ –≤—Å–µ –æ—Ç–º–µ—á–µ–Ω—ã
        if doneMessage.exists {
            XCTAssertTrue(doneMessage.exists)
        }
    }
    
    // MARK: - Settings Tests
    
    func testSettingsDisplays() throws {
        app.tabBars.buttons["Settings"].tap()
        sleep(1)
        
        XCTAssertTrue(app.navigationBars["Settings"].exists)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–π
        XCTAssertTrue(app.staticTexts["Appearance"].exists || app.staticTexts["Localization"].exists)
    }
    
    func testSettingsLogoutButton() throws {
        app.tabBars.buttons["Settings"].tap()
        sleep(1)
        
        // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Logout
        let logoutButton = app.buttons["Logout"]
        
        if logoutButton.exists {
            XCTAssertTrue(logoutButton.exists)
            XCTAssertTrue(logoutButton.isEnabled)
            
            // –ù–ï –Ω–∞–∂–∏–º–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã–π–¥–µ—Ç –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        }
    }
    
    func testSettingsAboutOpens() throws {
        app.tabBars.buttons["Settings"].tap()
        sleep(1)
        
        // –ò—â–µ–º About App
        let aboutButton = app.buttons["About App"].firstMatch
        
        if aboutButton.exists {
            aboutButton.tap()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫—Ä—ã–ª—Å—è About
            let aboutTitle = app.navigationBars["About"]
            XCTAssertTrue(aboutTitle.waitForExistence(timeout: 2))
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
            app.navigationBars.buttons.firstMatch.tap()
        }
    }
    
    // MARK: - Snapshot Tests (–¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    
    func testSnapshotChat() throws {
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —á–∞—Ç–∞
        let screenshot = app.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = "Chat_Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
    
    func testSnapshotArticles() throws {
        app.tabBars.buttons["Articles"].tap()
        sleep(1)
        
        let screenshot = app.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = "Articles_Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
    
    func testSnapshotRitual() throws {
        app.tabBars.buttons["Ritual"].tap()
        sleep(1)
        
        let screenshot = app.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = "Ritual_Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
    
    func testSnapshotSettings() throws {
        app.tabBars.buttons["Settings"].tap()
        sleep(1)
        
        let screenshot = app.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = "Settings_Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
    
    // MARK: - Performance Tests
    
    func testAppLaunchPerformance() throws {
        measure(metrics: [XCTApplicationLaunchMetric()]) {
            XCUIApplication().launch()
        }
    }
    
    func testArticlesScrollPerformance() throws {
        app.tabBars.buttons["Articles"].tap()
        
        measure(metrics: [XCTOSSignpostMetric.scrollDecelerationMetric]) {
            let scrollView = app.scrollViews.firstMatch
            scrollView.swipeUp()
            scrollView.swipeDown()
        }
    }
}

