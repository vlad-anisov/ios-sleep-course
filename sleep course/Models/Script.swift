import Foundation
import SwiftData

@Model
final class Script {
    @Attribute(.unique) var id: Int
    var name: String
    var stateValue: String
    var isMain: Bool
    var articleId: Int?
    var ritualLineId: Int?
    var nextScriptId: Int?
    
    @Relationship(deleteRule: .cascade, inverse: \ScriptStep.script)
    var steps: [ScriptStep] = []
    
    init(id: Int, name: String, state: ScriptState, isMain: Bool, articleId: Int? = nil, ritualLineId: Int? = nil, nextScriptId: Int? = nil) {
        self.id = id
        self.name = name
        self.stateValue = state.rawValue
        self.isMain = isMain
        self.articleId = articleId
        self.ritualLineId = ritualLineId
        self.nextScriptId = nextScriptId
    }
    
    var state: ScriptState {
        get { ScriptState(rawValue: stateValue) ?? .notRunning }
        set { stateValue = newValue.rawValue }
    }
    
    enum ScriptState: String, Codable {
        case notRunning = "not_running"
        case running = "running"
        case done = "done"
        case failed = "failed"
    }
    
    // Computed state based on steps
    var computedState: ScriptState {
        if steps.contains(where: { $0.state == .failed }) {
            return .failed
        } else if steps.contains(where: { $0.state == .waiting || $0.state == .preProcessing || $0.state == .postProcessing }) {
            return .running
        } else if steps.allSatisfy({ $0.state == .done }) {
            return .done
        } else {
            return .notRunning
        }
    }
    
    var sortedSteps: [ScriptStep] {
        steps.sorted { $0.sequence < $1.sequence }
    }
    
    var nextPendingStep: ScriptStep? {
        sortedSteps.first { $0.state != .done }
    }
    
    func buttonTitles(for step: ScriptStep) -> [String] {
        switch step.type {
        case .nextStepName:
            return sortedSteps
                .filter { step.nextStepIds.contains($0.id) }
                .map { $0.name }
        case .mood:
            return ["–û—Ç–ª–∏—á–Ω–æ üëç", "–ù–æ—Ä–º–∞–ª—å–Ω–æ üëå", "–ù–µ –æ—á–µ–Ω—å üëé"]
        default:
            return []
        }
    }
    
    func nextStep(from step: ScriptStep, userAnswer: String?) -> ScriptStep? {
        switch step.type {
        case .nextStepName:
            guard let answer = userAnswer else { return nil }
            return sortedSteps.first {
                step.nextStepIds.contains($0.id) && $0.name == answer
            }
        default:
            return sortedSteps.first { step.nextStepIds.contains($0.id) }
        }
    }
    
    func shouldAutoAdvance(from step: ScriptStep) -> Bool {
        !buttonTitles(for: step).isEmpty ? false : !step.nextStepIds.isEmpty
    }
    
    func autoAdvanceTarget(from step: ScriptStep) -> ScriptStep? {
        sortedSteps.first { step.nextStepIds.contains($0.id) }
    }
    
    static func mainRunningScript(in scripts: [Script]) -> Script? {
        scripts.first { $0.isMain && $0.state == .running }
    }
    
    @MainActor
    static func ensureMainScript(in context: ModelContext, scripts: [Script], messages: [ChatMessage]) -> Script {
        if let existing = mainRunningScript(in: scripts) {
            return existing
        }
        if let firstMain = scripts.first(where: { $0.isMain }) {
            if messages.isEmpty {
                firstMain.state = .running
                try? context.save()
            }
            return firstMain
        }
        if let anyScript = scripts.first {
            return anyScript
        }
        let script = createStartScript(in: context)
        context.insert(script)
        try? context.save()
        return script
    }
    
    // Mock scripts data based on PostgreSQL
    @MainActor
    static func createStartScript(in context: ModelContext) -> Script {
        let script = Script(
            id: 1,
            name: "Start",
            state: .running,
            isMain: true,
            nextScriptId: 239
        )
        
        let stepsData: [(id: Int, name: String, message: String, sequence: Int, state: ScriptStep.StepState, type: ScriptStep.StepType, nextStepIds: [Int])] = [
            (1, "–ü—Ä–∏–≤–µ—Ç üëã", "<p>–ü—Ä–∏–≤–µ—Ç üëã</p>", 0, .done, .nextStepName, [10]),
            (10, "–ü—Ä–∏–≤–µ—Ç, –∞ –∫—Ç–æ —Ç—ã üôÇ", "<p>–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–∞, –∏ —è —è–≤–ª—è—é—Å—å –ª—É—á—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–Ω–∞ üòå</p>", 9, .done, .nothing, [7234]),
            (7234, "–û —Ç–µ–±–µ", "<p>–Ø –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º –º—è–≥–∫–æ –∑–∞—Å—ã–ø–∞—Ç—å, –ª–µ–≥—á–µ –ø—Ä–æ–±—É–∂–¥–∞—Ç—å—Å—è –ø–æ —É—Ç—Ä–∞–º, –ø–æ–±–µ–∂–¥–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –±–æ–ª–µ–µ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º–∏ ‚ú®</p>", 10, .notRunning, .nothing, [7235]),
            (7235, "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "<p>–í–æ –º–Ω–µ —Å–æ–±—Ä–∞–Ω—ã –¥–µ—Å—è—Ç–∫–∏ —Å–∞–º—ã—Ö –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ 415 –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –∏ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö üìö</p>", 11, .notRunning, .nextStepName, [12]),
            (12, "–í—ã–≥–ª—è–¥–∏—Ç –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ ü§©", "<p>–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –º–æ–π –∫—É—Ä—Å –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞ üåô</p>", 13, .done, .nothing, [7353]),
            (7353, "–ß—Ç–æ –∫–ª–∞—Å—Å–Ω–æ–µ?", "<p>–ó–Ω–∞–µ—à—å, —á—Ç–æ –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ —Å–∞–º–æ–µ –∫–ª–∞—Å—Å–Ω–æ–µ üòé</p>", 14, .notRunning, .nothing, [7236]),
            (7236, "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "<p>–Ø –Ω–µ –±—É–¥—É —á–∏—Ç–∞—Ç—å –ª–µ–∫—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–ø–∞—Ç—å –±–æ–ª—å—à–µ. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–∏–ª—ã –∑–∞ —Ç–æ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –º–æ–∂–µ—à—å —É–¥–µ–ª—è—Ç—å —Å–Ω—É üò¥</p>", 15, .notRunning, .nextStepName, [13]),
            (13, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫—É—Ä—Å üöÄ", "<p>–û—Ç–ª–∏—á–Ω–æ, —è –±—É–¥—É —Ä–∞–¥ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–æ–±–æ–π –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ üòÅ</p>", 17, .done, .nothing, [7357]),
            (7357, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "<p>–ù–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É, –∏ –æ—Ç —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ –≤–æ –º–Ω–æ–≥–æ–º –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å —É—Å–ø–µ—Ö –Ω–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è üßë‚ÄçüöÄ</p>", 18, .notRunning, .nextStepName, [17]),
            (17, "–ü–æ–µ—Ö–∞–ª–∏ üßë‚ÄçüöÄ", "<p>–í–æ –º–Ω–µ —Å–æ–±—Ä–∞–Ω—ã —Å–æ—Ç–Ω–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –æ —Å–Ω–µ, –ø–æ—ç—Ç–æ–º—É —è –º–æ–≥—É –ª–µ–≥–∫–æ –Ω–∞–∑–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Ä–∞–∑–≤–µ—è—Ç—å –≤—Å–µ –º–∏—Ñ—ã. –ù–æ —ç—Ç–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ üòî</p>", 19, .notRunning, .nothing, [])
        ]
        
        script.steps = stepsData.map { data in
            ScriptStep(
                id: data.id,
                name: data.name,
                message: data.message,
                sequence: data.sequence,
                state: data.state,
                type: data.type,
                nextStepIds: data.nextStepIds,
                script: script
            )
        }
        
        return script
    }
    
    // Article-related scripts mapping
    static func scriptIdForArticle(_ articleId: Int) -> Int? {
        let scriptMapping: [Int: Int] = [
            41: 239,  // –°—Ç–∞—Ä—Ç üöÄ
            42: 232,  // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ üå°Ô∏è
            46: 186,  // –í–∞–Ω–Ω–∞ üõÅ
            47: 234,  // –°–≤–µ—Ç üí°
            48: 484,  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–Ω—É üõèÔ∏è
            50: 485,  // –ü–∏—Ç–∞–Ω–∏–µ üçΩ
            51: 486,  // –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ ü•É
            53: 487,  // –ö–æ—Ñ–µ –∏ —á–∞–π ‚òïÔ∏è
            55: 488,  // –û—Å–Ω–æ–≤—ã –ö–ü–¢ ‚ú®
            58: 489   // –£—Ç—è–∂–µ–ª–µ–Ω–Ω—ã–µ –æ–¥–µ—è–ª–∞ üòä
        ]
        return scriptMapping[articleId]
    }
}

