import Foundation
import SwiftData

@Model
final class Ritual {
    @Attribute(.unique) var id: Int
    var name: String
    var userId: Int
    var sequence: Int
    
    @Relationship(deleteRule: .cascade, inverse: \RitualLine.ritual)
    var lines: [RitualLine] = []
    
    init(id: Int, name: String, userId: Int, sequence: Int = 0) {
        self.id = id
        self.name = name
        self.userId = userId
        self.sequence = sequence
    }
    
    // Computed property
    var isCheck: Bool {
        !lines.isEmpty && lines.allSatisfy { $0.isCheck }
    }
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ (–≤–∏–¥–∏–º—ã–µ) –ª–∏–Ω–∏–∏
    var activeLines: [RitualLine] {
        lines.filter { $0.isActive }.sorted { $0.sequence < $1.sequence }
    }
    
    // –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –ª–∏–Ω–∏–∏ (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
    var inactiveBaseLines: [RitualLine] {
        lines.filter { !$0.isActive && $0.isBase }.sorted { $0.sequence < $1.sequence }
    }
}

@Model
final class RitualLine {
    @Attribute(.unique) var id: Int
    var name: String
    var sequence: Int
    var isCheck: Bool
    var isBase: Bool
    var isActive: Bool // true = –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, false = —É–¥–∞–ª–µ–Ω–∞ (—Å–∫—Ä—ã—Ç–∞)
    
    var ritual: Ritual?
    
    // –ü–æ–ª–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î)
    init(id: Int, name: String, sequence: Int, isCheck: Bool, isBase: Bool = false, isActive: Bool = true, ritual: Ritual? = nil) {
        self.id = id
        self.name = name
        self.sequence = sequence
        self.isCheck = isCheck
        self.isBase = isBase
        self.isActive = isActive
        self.ritual = ritual
    }
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–∏–Ω–∏–π) - ID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    convenience init(name: String, ritual: Ritual? = nil) {
        self.init(
            id: Int(Date().timeIntervalSince1970 * 1000), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ timestamp
            name: name,
            sequence: 0,
            isCheck: false,
            isBase: false,
            isActive: true,
            ritual: ritual
        )
    }
}

// Mock data for development (based on real PostgreSQL data)
extension Ritual {
    static func createMockRitual() -> Ritual {
        let ritual = Ritual(id: 1, name: "–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª", userId: 1, sequence: 0)
        let lines = [
            RitualLine(id: 54, name: "–ú–µ–¥–∏—Ç–∞—Ü–∏—è üßò", sequence: 0, isCheck: false, isBase: true, isActive: true, ritual: ritual),
            RitualLine(id: 89, name: "–°–∫—É—à–∞—Ç—å –∫–∏–≤–∏ ü•ù", sequence: 1, isCheck: false, isBase: true, isActive: true, ritual: ritual),
            RitualLine(id: 88, name: "–ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É üí®", sequence: 2, isCheck: false, isBase: true, isActive: true, ritual: ritual),
            RitualLine(id: 87, name: "–ü—Ä–∏–≥–ª—É—à–∏—Ç—å —Å–≤–µ—Ç üí°", sequence: 3, isCheck: false, isBase: true, isActive: true, ritual: ritual),
            RitualLine(id: 86, name: "–¢—ë–ø–ª–∞—è –≤–∞–Ω–Ω–∞ üõÅ", sequence: 4, isCheck: false, isBase: true, isActive: true, ritual: ritual),
            RitualLine(id: 85, name: "–ù–∞–¥–µ—Ç—å –Ω–æ—Å–∫–∏ üß¶", sequence: 5, isCheck: false, isBase: true, isActive: true, ritual: ritual),
            RitualLine(id: 84, name: "–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–ª–∞ ‚úÖ", sequence: 6, isCheck: false, isBase: true, isActive: true, ritual: ritual),
        ]
        ritual.lines = lines
        return ritual
    }
}

