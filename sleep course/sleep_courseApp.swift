import SwiftUI
import SwiftData
import UserNotifications

@main
struct sleep_courseApp: App {
    
    let modelContainer: ModelContainer
    
    init() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º delegate –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
        UNUserNotificationCenter.current().delegate = NotificationDelegate.shared
        do {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SwiftData ModelContainer —Å–æ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏
            let schema = Schema([
                ChatMessage.self,
                Ritual.self,
                RitualLine.self,
                Article.self,
                Statistic.self,
                Settings.self,
                Script.self,
                ScriptStep.self
            ])
            
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            let modelConfiguration = ModelConfiguration(
                schema: schema,
                isStoredInMemoryOnly: false,
                allowsSave: true
            )
            
            modelContainer = try ModelContainer(for: schema, configurations: [modelConfiguration])
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            initializeDataIfNeeded()
        } catch {
            print("‚ö†Ô∏è Failed to load existing container: \(error)")
            print("üîÑ Attempting to reset database...")
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –±–∞–∑—É –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
            do {
                let schema = Schema([
                    ChatMessage.self,
                    Ritual.self,
                    RitualLine.self,
                    Article.self,
                    Statistic.self,
                    Settings.self,
                    Script.self,
                    ScriptStep.self
                ])
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                let url = ModelConfiguration().url
                try? FileManager.default.removeItem(at: url)
                print("‚úÖ Old database removed")
                
                let modelConfiguration = ModelConfiguration(
                    schema: schema,
                    isStoredInMemoryOnly: false,
                    allowsSave: true
                )
                
                modelContainer = try ModelContainer(for: schema, configurations: [modelConfiguration])
                print("‚úÖ New database created successfully")
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                initializeDataIfNeeded()
            } catch {
                fatalError("Failed to initialize ModelContainer after reset: \(error)")
            }
        }
    }
    
    var body: some Scene {
        WindowGroup {
            MainTabView()
        }
        .modelContainer(modelContainer)
    }
    
    // MARK: - Data Initialization
    
    private func initializeDataIfNeeded() {
        let context = ModelContext(modelContainer)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        let settingsDescriptor = FetchDescriptor<Settings>()
        let existingSettings = (try? context.fetch(settingsDescriptor)) ?? []
        
        if existingSettings.isEmpty {
            let settings = Settings()
            context.insert(settings)
            try? context.save()
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            Task {
                let center = UNUserNotificationCenter.current()
                do {
                    let granted = try await center.requestAuthorization(options: [.alert, .sound, .badge])
                    print(granted ? "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã" : "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã")
                    
                    if granted {
                        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        let content = UNMutableNotificationContent()
                        content.title = "–í—Ä–µ–º—è —Ä–∏—Ç—É–∞–ª–∞"
                        content.body = "–ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –≤–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–Ω–∞ üåô"
                        content.sound = .default
                        
                        let components = Calendar.current.dateComponents([.hour, .minute], from: settings.notificationTime)
                        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: true)
                        let request = UNNotificationRequest(identifier: "daily_ritual", content: content, trigger: trigger)
                        
                        try await center.add(request)
                        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ \(components.hour!):\(String(format: "%02d", components.minute!))")
                    }
                } catch {
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: \(error)")
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞—Ç—å–∏
        let articlesDescriptor = FetchDescriptor<Article>()
        let existingArticles = (try? context.fetch(articlesDescriptor)) ?? []
        
        if existingArticles.isEmpty {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            Article.mockArticles.forEach { mockArticle in
                let article = Article(
                    id: mockArticle.id,
                    name: mockArticle.name,
                    text: mockArticle.text,
                    shortName: mockArticle.shortName,
                    articleDescription: mockArticle.articleDescription,
                    emoji: mockArticle.emoji,
                    firstColor: mockArticle.firstColor,
                    secondColor: mockArticle.secondColor,
                    imageData: mockArticle.imageData,
                    isAvailable: mockArticle.isAvailable
                )
                context.insert(article)
            }
            try? context.save()
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∏—Ç—É–∞–ª—ã (–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!)
        let ritualsDescriptor = FetchDescriptor<Ritual>()
        let existingRituals = (try? context.fetch(ritualsDescriptor)) ?? []
        
        if existingRituals.isEmpty {
            print("üîÑ –°–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∏—Ç—É–∞–ª –∏ –ª–∏–Ω–∏–∏...")
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∏—Ç—É–∞–ª
            let ritual = Ritual(
                id: 1,
                name: "–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª",
                userId: 1,
                sequence: 0
            )
            context.insert(ritual)
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —Ä–∏—Ç—É–∞–ª–∞
            let mockLines = [
                RitualLine(id: 54, name: "–ú–µ–¥–∏—Ç–∞—Ü–∏—è üßò", sequence: 0, isCheck: false, isBase: true, isActive: true, ritual: ritual),
                RitualLine(id: 89, name: "–°–∫—É—à–∞—Ç—å –∫–∏–≤–∏ ü•ù", sequence: 1, isCheck: false, isBase: true, isActive: true, ritual: ritual),
                RitualLine(id: 88, name: "–ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É üí®", sequence: 2, isCheck: false, isBase: true, isActive: true, ritual: ritual),
                RitualLine(id: 87, name: "–ü—Ä–∏–≥–ª—É—à–∏—Ç—å —Å–≤–µ—Ç üí°", sequence: 3, isCheck: false, isBase: true, isActive: true, ritual: ritual),
                RitualLine(id: 86, name: "–¢—ë–ø–ª–∞—è –≤–∞–Ω–Ω–∞ üõÅ", sequence: 4, isCheck: false, isBase: true, isActive: true, ritual: ritual),
                RitualLine(id: 85, name: "–ù–∞–¥–µ—Ç—å –Ω–æ—Å–∫–∏ üß¶", sequence: 5, isCheck: false, isBase: true, isActive: true, ritual: ritual),
                RitualLine(id: 84, name: "–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–ª–∞ ‚úÖ", sequence: 6, isCheck: false, isBase: true, isActive: true, ritual: ritual),
            ]
            
            mockLines.forEach { line in
                context.insert(line)
            }
            
            ritual.lines = mockLines
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∏—Ç—É–∞–ª –∏ –ª–∏–Ω–∏–∏
            try? context.save()
            print("‚úÖ –†–∏—Ç—É–∞–ª –∏ \(mockLines.count) –ª–∏–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã!")
        } else {
            print("‚úÖ –†–∏—Ç—É–∞–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: \(existingRituals.count) —à—Ç.")
        }
    }
}

// MARK: - Notification Delegate –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ

class NotificationDelegate: NSObject, UNUserNotificationCenterDelegate {
    static let shared = NotificationDelegate()
    
    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        willPresent notification: UNNotification,
        withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void
    ) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä, –∑–≤—É–∫ –∏ –±–µ–π–¥–∂ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
        completionHandler([.banner, .sound, .badge])
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        didReceive response: UNNotificationResponse,
        withCompletionHandler completionHandler: @escaping () -> Void
    ) {
        print("üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        completionHandler()
    }
}
